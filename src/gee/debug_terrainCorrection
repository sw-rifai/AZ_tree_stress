var image1 = ee.Image("LANDSAT/LC08/C02/T1_L2/LC08_128044_20171220")
print(image1)
var inBands = ee.List(['SR_B2','SR_B3','SR_B4','SR_B5','SR_B6','SR_B7'])
var outBands = ee.List(['blue','green','red','nir','swir1','swir2']); 
var image1 = image1.select(inBands,outBands);


var out_scale = 300;
var l8_scale = 2.75e-05; 
var l8_offset = -0.2;

// get terrain layers
// var dem = ee.Image("USGS/SRTMGL1_003");
var dem = ee.ImageCollection("COPERNICUS/DEM/GLO30")
            .select("DEM")
            .filter(ee.Filter.bounds(image1.geometry(100)))
            .mosaic(); 

var degree2radian = 0.01745;


////////////////////////////////////////////////////////////////////////////////
// Function to calculate illumination condition (IC). Function by Patrick Burns and Matt Macander 
function illuminationCondition(img){

  // Extract image metadata about solar position
  var SZ_rad = ee.Image.constant(ee.Number(img.get('SUN_AZIMUTH')))
                       .multiply(3.14159265359)
                       .divide(180)
                       .clip(img.geometry().buffer(10000)); 
  var SA_rad = ee.Image.constant(ee.Number(img.get('SUN_AZIMUTH'))
                       .multiply(3.14159265359)
                       .divide(180))
                       .clip(img.geometry().buffer(10000)); 
                       
  // Creat terrain layers
  var slp = ee.Terrain.slope(dem).clip(img.geometry().buffer(10000));
  var slp_rad = ee.Terrain.slope(dem).multiply(3.14159265359).divide(180).clip(img.geometry().buffer(10000));
  var asp_rad = ee.Terrain.aspect(dem).multiply(3.14159265359).divide(180).clip(img.geometry().buffer(10000));
  
  // Calculate the Illumination Condition (IC)
  // slope part of the illumination condition
  var cosZ = SZ_rad.cos();
  var cosS = slp_rad.cos();
  var slope_illumination = cosS.expression("cosZ * cosS", 
                                          {'cosZ': cosZ,
                                           'cosS': cosS.select('slope')});
  // aspect part of the illumination condition
  var sinZ = SZ_rad.sin(); 
  var sinS = slp_rad.sin();
  var cosAziDiff = (SA_rad.subtract(asp_rad)).cos();
  var aspect_illumination = sinZ.expression("sinZ * sinS * cosAziDiff", 
                                           {'sinZ': sinZ,
                                            'sinS': sinS,
                                            'cosAziDiff': cosAziDiff});
  // full illumination condition (IC)
  var ic = slope_illumination.add(aspect_illumination);
  
  // Add IC to original image
  var img_plus_ic = ee.Image(img.addBands(ic.rename('IC')).addBands(cosZ.rename('cosZ')).addBands(cosS.rename('cosS')).addBands(slp.rename('slope')));
  return img_plus_ic;
}


   ////////////////////////////////////////////////////////////////////////////////
  // Function to apply the Sun-Canopy-Sensor + C (SCSc) correction method to each 
  // image. Function by Patrick Burns and Matt Macander 
function illuminationCorrection(img){
    var props = img.toDictionary();
    var st = img.get('system:time_start');
    
    var img_plus_ic = img;
    var mask1 = img_plus_ic.select('nir').gt(-0.1);
    var mask2 = img_plus_ic.select('slope').gte(5)
                            .and(img_plus_ic.select('IC').gte(0))
                            .and(img_plus_ic.select('nir').gt(-0.1));
    var img_plus_ic_mask2 = ee.Image(img_plus_ic.updateMask(mask2));
    
    // Specify Bands to topographically correct  
    var bandList = ['blue','green','red','nir','swir1','swir2']; 
    var compositeBands = img.bandNames();
    var nonCorrectBands = img.select(compositeBands.removeAll(bandList));
    
    var geom = ee.Geometry(img.get('system:footprint')).bounds().buffer(10000);
    
    //  EMBEDDED FUNCTION ///////////////////////////
    function apply_SCSccorr(band){
      var method = 'SCSc';
      var out = img_plus_ic_mask2.select('IC', band).reduceRegion({
      reducer: ee.Reducer.linearFit(), // Compute coefficients: a(slope), b(offset), c(b/a)
      geometry: ee.Geometry(img.geometry().buffer(-5000)), // trim off the outer edges of the image for linear relationship 
      scale: out_scale,
      maxPixels: 1000000000
      });  

      var out_a = ee.Number(out.get('scale'));
      var out_b = ee.Number(out.get('offset'));
      var out_c = out_b.divide(out_a);
      
      // Apply the SCSc correction
      var SCSc_output = img_plus_ic_mask2.expression(
        "((image * (cosB * cosZ + cvalue)) / (ic + cvalue))", {
        'image': img_plus_ic_mask2.select(band),
        'ic': img_plus_ic_mask2.select('IC'),
        'cosB': img_plus_ic_mask2.select('cosS'),
        'cosZ': img_plus_ic_mask2.select('cosZ'),
        'cvalue': out_c
      });
      
      return (SCSc_output);

    }
    // END EMBEDDED FUNCTION ////////////////////////////
    
    var img_SCSccorr = ee.Image(bandList.map(apply_SCSccorr)).addBands(img_plus_ic.select('IC'));
    var bandList_IC = ee.List([bandList, 'IC']).flatten();
    img_SCSccorr = img_SCSccorr.unmask(img_plus_ic.select(bandList_IC)).select(bandList);
    
    var out = img_SCSccorr.addBands(nonCorrectBands)
      .setMulti(props)
      .set('system:time_start',st);
      
    return(out); 
  }
  



var image2 = illuminationCondition(image1);



//   var method = 'SCSc';
//   var out = image2.select('IC', 'nir').reduceRegion({
//   reducer: ee.Reducer.linearFit(), // Compute coefficients: a(slope), b(offset), c(b/a)
//   geometry: ee.Geometry(image2.geometry().buffer(-5000)), // trim off the outer edges of the image for linear relationship 
//   scale: out_scale,
//   maxPixels: 1000000000
//   });  

//   var out_a = ee.Number(out.get('scale'));
//   var out_b = ee.Number(out.get('offset'));
//   var out_c = out_b.divide(out_a);
  
//     // Apply the SCSc correction
//     var SCSc_output = image2.expression(
//       "((image * (cosB * cosZ + cvalue)) / (ic + cvalue))", {
//       'image': image2.select('nir'),
//       'ic': image2.select('IC'),
//       'cosB': image2.select('cosS'),
//       'cosZ': image2.select('cosZ'),
//       'cvalue': out_c
//     });




var image3 = ee.Image(illuminationCorrection(ee.Image(image2))); 
print(image3)

Map.setCenter(104.0706, 22.3636, 12)
Map.addLayer(image1,{ bands: 'red,green,blue',min: 7500, max: 11000},'image1');
Map.addLayer(image2,{ bands: 'red,green,blue',min: 7500, max: 11000},'image2');
// Map.addLayer(image3,{ bands: 'nir',min: 7500, max: 11000},'image3');
